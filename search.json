[{"title":"Android手机root指南","url":"/2023/02/22/Android%E6%89%8B%E6%9C%BAroot%E6%8C%87%E5%8D%97/","content":"本教程主要提供方法流程、相关概念和资源链接\n为什么要root？国内安卓手机的系统多不是原生android，手机厂商本地化系统的同时关闭了一些权限，也针对用户使用场景进行调度调整，出于利益考量对用户关闭了一部分功能。但如果你有以下几点需求，获取手机的root权限可能是你作为android用户的选择：\n\n从根本上解决广告问题\n解决手机发热降频问题（自定义手机的调度策略）\n实时检测手机的CPU、GPU占用率和内存使用情况和后台service占用\n锁定GPU&#x2F;CPU频率（这可能对研究牲做移动端实验而言是一个削减不确定因素的好处：你也不想实验跑到一半降频影响实验结果吧）\n\n机型选择要注意的是，虽然获取root权限有很多的好处，但出于安全性和植入广告营收的考量，部分厂商并不希望你这么做，它们不会给你提供官方的解BL锁，获取root权限的工具和机会。\n在这里强烈建议使用小米手机和三星手机（三星手机解锁会熔断安全芯片，是否要root请自行考量），不建议使用华为、荣耀、oppo、vivo等品牌。\n说明：没有官方解锁工具的品牌可以通过第三方工具强制解锁，但并不建议尝试，这种做法可能会让你喜提一块板砖。\n准备工具\nandroid手机\nUSB转type-C数据线\nwindows电脑\n\n这里重点提醒！！！在所有工作开始前，一定要记得进行数据备份，刷机过程会清除所有的数据\n获取root权限这里以小米手机为例\n1. 解BL（Bootloader）锁​\t1.1 进入开发者模式\n​\t\t设置 -&gt; 我的设备 -&gt; 全部参数与信息 ，狂点MIUI版本即可进入\n​\t1.2 申请解BL锁\n​\t\t小米公司要求所有申请解BL锁的手机都要对手机进行小米账号登陆，一个小米账号一年智能解锁两次。\n​\t\t进入开发者选项，插入sim卡且登陆小米账号的情况下进入“设备解锁状态”进行解锁申请\n​\t\t然后你需要等待一周的时间才能进行下一步\n​\t1.3 Bootloader解锁\n​\t\t从第三步开始\n​\t\t解锁会清除手机全部数据\n2. 提取手机当前版本的boot镜像​\t2.1 下载当前版本完整包\n​\t\t进入手机系统更新页，点击右上角三个点———下载最新完整包，然后将zip完整包传输到电脑上\n3. boot镜像修补​\t3.1 boot镜像提取\n​\t\t如果2.1 中zip完整包中已经有boot.img,跳过此步骤\n​\t\t提取镜像\n​\t\t将提取出来的镜像传输回手机\n​\t3.2 magisk安装\n​\t\tmagisk用于android手机root权限的获取和统一管理，是应用最广泛的root工具\n​\t\t手机下载安装Magisk app：Magisk-download （科学下载）\n​\t3.3 boot镜像修补\n​\t\t进入软件\n   1.安装 – 2.选项 **都不勾**（勾了会卡米，部分手机没有选项）- 3.选择并修补一个文件（选择3.1的镜像即可）\n\n​\t\t修补成功，会在 Download 目录生成（magisk_patched-版本_随机.img）文件，每次生成的随机字符都不一样，使用的时候请输入生成的名字，将其传输到电脑上\n4. boot镜像替换及固化​\t4.1 adb fastboot准备工作\n​\t\t电脑下载 adb-fastboot：lanzoub.com&#x2F;b02plghuh（解压出来）\n​\t\t将刚才magisk修补过的镜像（magisk_patched-版本_随机.img）移动到abd-fastboot文件夹下\n​\t4.2 镜像替换及固化\n​\t\t手机重启进入fastboot模式后连接电脑\n​\t\t打开“打开CMD命令行.bat”，输入下面的命令\n​\t\t这里和magisk官方文档有一定出入，对magisk进行了固化，具体原因是：\n​\t\t现在的手机多为A&#x2F;B分区两套boot.img（ boot.a 和 boot.b ）镜像共用一套fastboot引导，这样做的好处是系统更新时不用关机，系统可以正常工作，对a分区进行系统升级时系统内核切换到b分区运行，反之亦然，等下次重启时再对其进行分区切换。看上去没有什么问题，对吧？但如果我们还是使用单分区面具刷入方法：\n​\t\t fastboot flash boot magisk_patched-版本_随机.img\n​\t\t那么等下一次系统升级的时候你的root权限就会被遗忘在上一个镜像里，在不断的镜像升级中你的root权限就掉了\n​\t\t当然，如果以上的分区和固化问题没有听懂也没有关系，记得不要升级手机系统就不会出现上述问题\nfastboot flash boot.a magisk_patched-版本_随机.imgfastboot flash boot.b magisk_patched-版本_随机.img\n\n​\t\t成功后输入以下指令重启即可\nfastboot reboot\n\n​\t\t后面的文章中会介绍benchmark、解锁温控、自定义调度的相关操作\n","categories":["摸一摸 Tensorflow Lite"],"tags":["android","root解锁","magisk"]},{"title":"Blog图床配置——PicGo","url":"/2023/03/02/Blog%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE%E2%80%94%E2%80%94PicGo/","content":"图床一、简介​\t图床是用来解决md文件和html组成的网页图片缺失问题，由于图片资源相比文字的高存储占用，纯文本和图片视频的解耦合能更好得解决这种问题，将图片转为云端链接，更加简单高效。\n​\t第三方插件和图床多免费使用，但链接和图片的时效性难以保证，时间一长容易失效，执行购买云端OSS资源进行图床配置是兼顾稳定性和效果的平衡之选。\n​\t（即刻图床是我之前使用的，图片2周后失效了，遂转向阿里云图床方案）\n\n二、阿里云OSS购买​\t\t点击对象存储OSS\n​\t购买40G包月包2年18块（一顿饭钱的价格感觉还可以🐶）\n\n​\t创建Bucket，注意读写权限设置为公共读，服务端加密方式设置为无\n\n​\t在对应bucket的文件列表中创建img文件夹（以后要保存图片的位置）\n\n​\t概览这里的外网访问和bucket域名是后面要使用的信息\n\n​\tAccesskey管理获取相关密钥\n三、PicGo下载&amp;配置1. 下载​\t下载链接\n​\t这里MacOS可以直接使用以下指令安装\nbrew install --cask picgo\n\n​\t由于MacOS的软件签名机制，安装后无法打开未签名的软件（会提醒软件已损坏，请移动到垃圾桶），可以使用以下指令绕过限制\nxattr -cr /Applications/PicGo.app\n\n2. 配置\n​\t使用（二）步骤中的相关信息进行填写后设为默认图床即可\n​\t注意⚠️：\n\nkeyid和keysecret是Accesskey内容\nbucket为bucket的名称\n存储区域注意要去掉后面的后缀（aliyun.com）\n自定义域名即为http:&#x2F;&#x2F;[ Bucket域名 ]\n\n四、Typora联动​\t打开typora -&gt; settings -&gt; 图像 -&gt; 上传服务\n\n​\t选择PicGo.app\n​\t点击验证图片上床选项\n\n​\t使用方法\n\n​\t点解上传所有本地图片即可，注意不要将文件重复上传（图片文件名称不能一致）\n​\tDone\n","tags":["阿里云OSS","PicGo","MacOS"]},{"title":"Homebrew—— MacOS软件（包）管理工具","url":"/2023/03/13/Homebrew%E2%80%94%E2%80%94-MacOS%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%8C%85%EF%BC%89%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/","content":"Homebrew一、什么是Homebrew​\t关于**Homebrew**，你可以理解为包管理器，和linux中的apt、yum、pkg相似，但Homebrew的软件源和设计专门针对MacOS进行优化设计。\n​\t如果你也是Mac用户，建议你也使用这种软件（包）安装卸载方式，因为mac的定位更多的介于linux和windows之间，没有windows那样强大的生态支持（如果我说App Store一坨答辩你一定会赞同我，很多好用的软件没有上架），CLI操作又不如linux那般灵活，但好在Homebrew为mac提供了丰富的软件生态，让你安装管理软件包和软件都非常便捷。\n​\t它的好处是丰富软件生态的同时方便包管理，如果你恰好是编程爱好者，那么它应该是Mac使用中不可或缺的存在\n二、安装​\t首先要进行外源软件安装许可的配置\nsudo spctl --master-disable\n\n​\t如果你初次接触mac，建议安装Xcode command-line-tools\nxcode-select --install \n\n​\t安装非常简单，一行指令搞定\n# 根据Mac终端 shell 选择 shell location （MacOS自12版本以后好像都是zsh了，不再默认bash）/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n三、常见使用场景及相关指令​\t在开始使用之前先明确Homebrew的资源分类为两种\n\nFormulae\t就类似于cmake之类的软件包都是Formulae\nCask            我们常规说理解的可视化软件都是Cask（但是很多软件会提供带GUI和不带GUI两种版本，都是cask分类，可以自行选择）\n\n​\t下面就是常见的场景和指令了\n\n查询及安装\n如果你想安装notion，但是不确定homebrew中是否有这一软件，可以通过以下指令查询：\nbrew search notion\n\n然后就可以根据查询结果进行选择安装了\nbrew install cmake\t\t# 安装Formulae的指令brew install --cask notion\t\t# 安装Cask的指令\n\n卸载\nbrew uninstall [formulae|cask name]\n\n查询可更新软件包及更新\n更新之前要先自行 \nbrew update\n\n这是为了更新brew中的资源链接和位置信息\n这里要注意的是，homebrew的管理逻辑是，不提供自动更新服务，官网给出的理由是github源版本和软件内部的更新选项可能会发生冲突，如果要通过指令更新需要加强制查询指令（找了半个多小时才在官网发现原来是这个原因，CSDN啥也不是，真捞）\nbrew outdated --cask --greedy\n\n\n这里假如我要升级notion，执行如下指令\nbrew upgrade notion\n\n更新过程完全自动，不会丢失相关配置信息的\n\n显示所有已安装包\nbrew list   # 会显示所有的Formulae和Cask\n\n清理\nbrew cleanup --prune=0\n\n四、软件定位​\tHomebrew作为一款包管理工具，能很好的替代App Store拉胯的软件生态和管理方式，很适合作为Mac的软件源。\n","categories":["MacOS生产力配置"],"tags":["MacOS","Homebrew"]},{"title":"MorphNet（1）—— docker 配置","url":"/2023/02/23/MorphNet%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94-docker-%E9%85%8D%E7%BD%AE/","content":"关于docker一、failure由于经验不足，在linux端docker配置和nvidia-docker上吃了不少亏，没有详细看说明文档也导致实验进展缓慢，于是摸了摸docker，记录问题并给出个人理解。\n二、相关问题docker build -f Dockerfile -t tensorflow:1.15 \n\n-f\t指示Dockerfile位置\n-t&#x2F;-tag\t镜像的名字及标签，通常 name:tag 或者 name 格式；\n\nFROM 镜像源，由于是国外镜像源，build会出现无法解析的问题，需要进行换源处理，在daemon配置文件中加入下面的内容解决\n&quot;registry-mirrors&quot;:[&quot;https://registry.docker-cn.com&quot;]\n\n但 ln -s 软连接又不能运行了，后来解决了进入docker后通过 whtich python 发现没有python2版本，所以不能执行\n将软链接和pip3更新写入后发现还是无法执行，httpcommunicate超时，手动延长等待时间依旧失效，但又不能使用国外源（会导致上面FROM失效或者numpy等找不到对应版本），只能折中使用\nRUN pip3 install -i [国内源] --upgrade pip \n\n\n构建成功后使用\nnvidia-docker run -it --rm -v $(pwd):/mnt -p 5001:6006 tensorflow:1.15\n\n虽然nvidia-docker2等已经配置完成，依旧失败\n\n后来尝试使用sudo root权限下运行（因为发现nvidia-container-cli是root用户下包，普通docker用户无法访问），还是失败，出现无images错误，后通过以下指令发现root镜像和普通用户镜像是分开管理的\n\n于是在root用户下重新安装镜像，运行，成功\n\n但是貌似docker desktop并不能识别出root用户下的containers，images倒是可以，后面在看看啥情况。\n\n","categories":["MorphNet 分析"],"tags":["MorphNet","docker","ubuntu"]},{"title":"TFLite Modle Benchmark Tools 使用","url":"/2023/03/02/TFLite-Modle-Benchmark-Tools-%E4%BD%BF%E7%94%A8/","content":"科学上网，必不可少\nhttps://github.com/Kr328/ClashForAndroid/releases\nhttps://ai-benchmark.com/download.html\nandroid、windows等\n\n查看ADB版本：adb version\n查看手机设备：adb devices\n查看设备型号：adb shell getprop ro.product.model\n查看电池信息：adb shell dumpsys battery\n查看设备ID：adb shell settings get secure android_id\n查看设备IMEI：adb shell dumpsys iphonesubinfo\n查看Android版本：adb shell getprop ro.build.version.release\n查看手机网络信息：adb shell ifconfig\n查看设备日志：adb logcat\n重启手机设备：adb reboot\n安装一个apk：adb install &#x2F;path&#x2F;demo.apk\n卸载一个apk：adb uninstall \n查看系统运行进程：adb shell ps\n查看系统磁盘情况：adb shell ls &#x2F;path&#x2F;\n手机设备截屏：adb shell screencap -p &#x2F;sdcard&#x2F;aa.png\n手机文件下载到电脑：adb pull &#x2F;sdcard&#x2F;aa.png .&#x2F;\n电脑文件上传到手机：adb push aa.png &#x2F;data&#x2F;local&#x2F;\n手机设备录像：adb shell screenrecord &#x2F;sdcard&#x2F;ab.mp4\n手机屏幕分辨率：adb shell wm size\n手机屏幕密度：adb shell wm density\n手机屏幕点击：adb shell input tap xvalue yvalue\n手机屏幕滑动：adb shell input swipe 1000 1500 200 200\n手机屏幕带时间滑动：adb shell input swipe 1000 1500 0 0 1000\n手机文本输入：adb shell input text xxxxx\n手机键盘事件：adb shell input keyevent xx\n连接多个手机设备时，指定手机设备：adb -s serialNumber \n\nADB无线连接\n\n保证手机和电脑处在同一个无线网络内\n在USB连接的基础上，执行命令【adb tcpip 5555】\n断开USB连接，执行命令【adb connect 192.168.x.x:5555】\n此时执行命令【adb devices】即可查看到连接的手机设备信息\n\n待整理补坑"},{"title":"MorphNet（2）—— MacOS深度学习","url":"/2023/03/02/MorphNet%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94-MacOS%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/","content":"MorphNet运行一、概述​\tmorphnet的作用是对网络进行收缩和扩放，在统一扩放和基于特定资源约束的收缩过程中进行网络训练，在GroupLasso的正则化方法下完成对filter等结构的搜索，从而保证在同等精准度的情况下实现网络结构的精简和优化\n二、平台选择​\t这里主要实用了ubuntu、MacOS和CoLab进行模型训练，官方代码的测试代码冗余过多，通过官方的dockfile配置环境后无法正常运行model zoo测试，遂转向 .ipynb 文件使用jupyter运行，对测试进行精简，也方便分步调试\n1. ubuntu​\t使用vscode、miniconda，安装兼容的软件包版本后jupyter notebook 输出字体过大，而vscode没有相关设置\n​\t解决方案：\n​\t安装jupyter-themes，运行以下代码后解决\njt -ofs 10\n\n​    导入v1版本tensorflow包时提示chardet包缺失，虚拟环境中安装后又显示循环导入，无法解决该问题\n2. MacOS2.1 miniconda安装brew install --cask minicondaconda init# conda 默认每次开启终端进入base环境，如果不想要终端自启，可以通过以下指令禁止conda config --set auto_activate_base false\n\n​\t\tminiconda是conda的精简版本，用于管理多种python版本及其软件依赖包组成的虚拟环境。\n​\t\t带有GUI界面的conda更加美观，但内存占用和开销也更大，miniconda没有可视化界面，只能通过命令行控制，更加简洁高效，下面是一些miniconda的基础使用指令\n# 进入环境和退出环境conda activate 虚拟环境名  # 如果是base环境，可以不加环境名 conda deactivate         # 退出conda # 查看当前虚拟环境中已经安装的软件包及其版本 conda list  # 安装和卸载所需软件包 conda install 软件包=版本号  # 也可以使用pip/pip3，这里要注意使用当前虚拟环境下的pip，可以用 which pip/which pip3 进行查看\t conda uninstall 软件包  # 创建虚拟环境 conda create -n 虚拟环境名称 python=版本号 软件包=版本号 # 只有python和版本号是必填的软件包设置# conda缓存清理conda clean -p   # 删除无用的软件包\n\n2.2 Tensorflow安装（GPU版—适配M系列芯片）​\t\t这里碰到的问题比较多，tensorflow针对M系列芯片的Mac之前支持性并不好，只有CPU版本，现在apple developer官方放出了GPU版本的tensorflow，个人结合官网和博客（只能使用miniforge，不能使用miniconda），摸索出Mac GPU版本tensorflow安装教程，并在原博客下方给出了新的安装方法\n​\t\t准备：\n\n系统版本： MacOS Monterey（12）及以上\n\nminiconda ：arm64 version（适配M芯片的版本）\n\npython ： 3.8+ （创建虚拟环境时注意）\n开始：\n\n创建虚拟环境\nconda create -n tf python=3.9.13  # 要求 python 3.9 以上版本\n\n安装apple官方tensorflow依赖包\nconda activate tf  # 先进入刚刚创建的虚拟环境conda install -c apple tensorflow-deps\n\n安装gpu版tensorflow\n这里注意安装前要查看到底python3还是python对应的是虚拟环境下的python，使用虚拟环境下的python对应的pip进行安装才能在虚拟环境中使用（如果你不介意command-line-tool下的python环境和conda虚拟环境乱做一团，也可以不用考虑这个问题，不用安装miniconda，直接在默认全局python种使用pip进行安装也可以）\n# 如果不确定使用python3还是python，可以使用which python查看路径，使用虚拟环境下的python才有效（一般都是python3）python3 -m pip install tensorflow-macos \n\n安装tensorflow metal\npython3 -m pip install tensorflow-metal\n\n解决内部软件包版本兼容问题\n$ python3     # 进入当前虚拟环境下的python解释器  import tensorflow （这时会出现报错，提示numpy版本不兼容）  # 解决方案：  exit()      # 先退出python解释器  conda uninstall numpy  pip3 install numpy   # 然后再尝试导入 tensorflow ，成功\n\n\n\n2.3 jupyter notebook安装配置​\t\tjupyter notebook 主要用来交互式python编程，方便实时查看输出和运行情况和分享运行结果\n​\t\t很容易，通过一行指令即可进行安装\nconda install jupyter notebook # 注意安装到装有tensorflow的虚拟环境中\n\n​\t\t运行时输入指令即可自动在默认浏览器打开\njupyter notebook   # 运行jupyter notebookjupyter notebook stop 或者 ctrl + c # 退出\n\n​\t\t当然，你也可以在vscode中进行配置和运行，需要进行如下配置：\n\n安装jupyter官方扩展\n\n安装ipykernel软件包\n这一步非常重要，如果发现切换虚拟环境时发现无法链接到虚拟环境对应的kernel，那么很有可能是你没有为虚拟环境安装ipykernel\nconda install ipykernel\n\n还有另外一种错误可能是，你的vscode中的jupyter扩展出现了问题，回退到上个版本很可能能帮你解决这个问题\n\n\n2.4 运行&amp;训练​\t这里显示模型训练的信息，M2芯片（8 CPU + 10 GPU 版本）一个epoch大概要130s ，而且非常烫（因为没风扇）\n​\t相比colab要慢很多（23s&#x2F;epoch）\n\n​\t\t对比发现训练前后，模型结构更加稀疏了，模型适应方法的作用非常显著（下图是训练前后模型结构）\n\n3. CoLab​\t相比与以上两个平台，好处是不用考虑相关的软件包依赖问题，且GPU算力强大还免费（16G显存真爽，win本上GTX1650显存才4G）\n​\t使用技巧后续再发\n​\t\n","categories":["MorphNet 分析"],"tags":["MacOS","MorphNet","jupyter","Tensorflow","miniconda"]}]